name: Trigger Gitlab CI/CD

on:
  workflow_call:
    inputs:
      enabled:
        type: boolean
        required: false
        default: false
    secrets:
      GITLAB_TOKEN:
        required: true
      GITLAB_PROJECT_BRANCH:
        required: true
      GITLAB_PROJECT_ID:
        required: true

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Init
        run: echo "OK"
  build:
    runs-on: ubuntu-latest
    if: ${{ inputs.enabled }}
    env:
      GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
      GITLAB_BASE_URL: "https://gitlab.com/api/v4/projects"
      GITLAB_PROJECT_BRANCH: ${{ secrets.GITLAB_PROJECT_BRANCH }}
      GITLAB_PROJECT_ID: ${{ secrets.GITLAB_PROJECT_ID }}
      SLEEP_TIME: 10
    steps:
      - name: Info
        run: |
            GITHUB_EVENT=$(jq --raw-output . "$GITHUB_EVENT_PATH")
            echo $GITHUB_EVENT
            GITHUB_PROJECT_NAME=$(jq --raw-output .repository.name "$GITHUB_EVENT_PATH")
            GITHUB_REPOSITORY=$(jq --raw-output .repository.full_name "$GITHUB_EVENT_PATH")
            GITHUB_COMMIT=$GITHUB_SHA	# $(jq --raw-output .after "$GITHUB_EVENT_PATH")
            GITHUB_PULLREQUEST_BRANCH=$(jq --raw-output .pull_request.head.ref "$GITHUB_EVENT_PATH")
            GITHUB_BRANCH=$(jq --raw-output .repository.master_branch "$GITHUB_EVENT_PATH")
            GITHUB_PULLREQUEST=$(jq --raw-output .pull_request._links.html.href "$GITHUB_EVENT_PATH")
      - name: Trigger Gitlab
        run: |
          PIPELINE_ID=$(curl --request POST --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" "${GITLAB_BASE_URL}/${GITLAB_PROJECT_ID}/pipeline?ref=${GITLAB_PROJECT_BRANCH}" | jq .id)
          echo "PIPELINE_ID=$PIPELINE_ID"
          if [ -z $PIPELINE_ID ] || [ "$PIPELINE_ID" == "null" ]; then
           exit 1
          fi
          echo "Gitlab pipeline id: $PIPELINE_ID"
          echo "${GITLAB_BASE_URL}/$PIPELINE_ID"
      - name: Wait
        run: |
          sleep $SLEEP_TIME
      - name: Check
        run: |
          PIPELINE_INFO=$(curl --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" "${GITLAB_BASE_URL}/${GITLAB_PROJECT_ID}/pipelines/${PIPELINE_ID}");
          echo $PIPELINE_INFO
          PIPELINE_STATUS=$(echo $PIPELINE_INFO | jq .status);
          echo $PIPELINE_STATUS
          while [ $PIPELINE_STATUS = '"pending"' ] || [ $PIPELINE_STATUS = '"running"' ]; do
            echo "waiting ..."
            sleep $SLEEP_TIME
            PIPELINE_INFO=$(curl --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" "${GITLAB_BASE_URL}/${GITLAB_PROJECT_ID}/pipelines/${PIPELINE_ID}");
            echo $PIPELINE_INFO
            PIPELINE_STATUS=$(echo $PIPELINE_INFO | jq .status);
            echo "Pipeline status: $PIPELINE_STATUS"
          done
      - name: Exit
        run: |
          echo "Pipeline status: $PIPELINE_STATUS"
          if [[ $PIPELINE_STATUS != '"success"' ]]; then
            exit 1
          fi
