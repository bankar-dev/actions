name: Trigger Gitlab CI/CD

on:
  workflow_call:
    inputs:
      enabled:
        type: boolean
        required: false
        default: false
    secrets:
      GITLAB_TOKEN:
        required: true
      GITLAB_PIPELINE_API_URL:
        required: true
      GITLAB_PIPELINE_BASE_URL:
        required: true
      GITLAB_PIPELINE_TOKEN:
        required: true
      GITLAB_WEBHOOK_URL:
        required: true

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Init
        run: echo "OK"
  build:
    runs-on: ubuntu-latest
    if: ${{ inputs.enabled }}
    steps:
      - name: Trigger Gitlab
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITLAB_PIPELINE_API_URL: ${{ secrets.GITLAB_PIPELINE_API_URL }}
          GITLAB_PIPELINE_BASE_URL: ${{ secrets.GITLAB_PIPELINE_BASE_URL }}
          GITLAB_PIPELINE_TOKEN: ${{ secrets.GITLAB_PIPELINE_TOKEN }}
          GITLAB_WEBHOOK_URL: ${{ secrets.GITLAB_WEBHOOK_URL }}
          GITLAB_BASE_URL: "https://gitlab.com/api/v4/projects"
          GITLAB_PROJECT_BRANCH: ${{ secrets.GITLAB_PROJECT_BRANCH }}
          GITLAB_PROJECT_ID: ${{ secrets.GITLAB_PROJECT_ID }}
        run: |
          GITHUB_EVENT=$(jq --raw-output . "$GITHUB_EVENT_PATH")
          echo $GITHUB_EVENT
          GITHUB_PROJECT_NAME=$(jq --raw-output .repository.name "$GITHUB_EVENT_PATH")
          GITHUB_REPOSITORY=$(jq --raw-output .repository.full_name "$GITHUB_EVENT_PATH")
          GITHUB_COMMIT=$GITHUB_SHA	# $(jq --raw-output .after "$GITHUB_EVENT_PATH")
          GITHUB_PULLREQUEST_BRANCH=$(jq --raw-output .pull_request.head.ref "$GITHUB_EVENT_PATH")
          GITHUB_BRANCH=$(jq --raw-output .repository.master_branch "$GITHUB_EVENT_PATH")
          GITHUB_PULLREQUEST=$(jq --raw-output .pull_request._links.html.href "$GITHUB_EVENT_PATH")
          PIPELINE_ID=$(curl --request POST --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" -F variables[GH_REPOSITORY]=$GITHUB_REPOSITORY -F variables[GH_COMMIT]=$GITHUB_COMMIT -F variables[GH_BRANCH]=$GITHUB_BRANCH -F variables[GH_PULLREQUEST_BRANCH]=$GITHUB_PULLREQUEST_BRANCH -F variables[GH_PULLREQUEST]="$GITHUB_PULLREQUEST" -F variables[GH_PROJECT_NAME]=$GITHUB_PROJECT_NAME ${GITLAB_BASE_URL}/${GITLAB_PROJECT_ID}/pipeline?ref=${GITLAB_PROJECT_BRANCH} | jq .id)
          echo "Gitlab pipeline id: $PIPELINE_ID"
          echo "${GITLAB_PIPELINE_BASE_URL}/$PIPELINE_ID"
          while [[ $PIPELINE_STATUS != '"success"' && $PIPELINE_STATUS != '"failed"' && $PIPELINE_STATUS != '"canceled"' ]]
          do
            echo "waiting ..."
            sleep 30
            PIPELINE_STATUS=$(curl -Ss --header 'PRIVATE-TOKEN: ${GITLAB_TOKEN}' ${GITLAB_BASE_URL}/${GITLAB_PROJECT_ID}/pipelines/$PIPELINE_ID | jq .status);
            echo "Pipeline status: $PIPELINE_STATUS"

          done
          echo "Pipeline status: $PIPELINE_STATUS"
          if [[ $PIPELINE_STATUS != '"success"' ]]; then
            exit 1
          fi
